@startuml
skinparam monochrome true

class TTaskTree {
    +TTaskTree(id)
    +createTaskNode()
    +find(id)
    #generateId()

    -m_id: TId
    -m_alias: TString
    -m_name: TString
    -m_description: TString
    -m_root: TTaskNode*
}

class TTaskNode {
    +TTaskNode(id, tree)
    +addChildren(task)
    +removeChildren(id)
    +find(const TId id): TTaskTree

    +cutFromRoot(): bool
    +cutFromTree(): bool
    +deleteChildrens(): bool

    -m_id: TId
    -m_name: TString
    -m_description: TString
    -m_property: TTaskProperty
    -m_parent: TTaskNode
    -m_children: TChildrenList
    -m_tree: TTaskTree
}

class "<<TTaskNode*>>\nstd::vector"
"<<TTaskNode*>>\nstd::vector" <|-- TChildrenList

TTaskTree o-left- TTaskNode : m_root
TTaskNode *-down- TTaskProperty: m_property
TTaskNode *-down- TChildrenList: m_children
TChildrenList "1" o-- "*" TTaskNode
TTaskNode o-right- TTaskTree: m_tree

class TTaskProperty {
    +get(name, value): bool
    +set(name, value)
    -m_values: TValueMap
}

TTaskProperty *-left- TValueMap: m_values
"<<TString, TValue>>\nstd::map" <|-- TValueMap

TValueMap "1" *-down- "*" TValue

class TValue {
    -m_type: TValueType
    -m_value

    +getType: TValueType
    +getValue()
    +setValue(value)
}
TValue .right. TValueType : m_type

enum TValueType <<enumeration >> {
    E_UNDEFINED
    E_INT32
    E_INT64
    E_DOUBLE
    E_TSTRING
    E_TURL
}

class TTaskTreeManager {
    +init(): bool 
    +createTaskTree(): TTaskTree
    +importTaskTree(uml, tree): bool
    +exportTaskTree(uml, tree): bool
    +release(): bool

    #createSourcesFactory(): bool 
    #generateId(): TId

    -m_sourceFactory: TSourcesFactory
    -m_taskTrees: TTaskTreeList
}

TTaskTreeManager *-left- TTaskTreeList: m_taskTrees
"<<TId, TTaskTree*>>\nstd::map" <|-- TTaskTreeList
TTaskTreeList o-down- TTaskTree

TTaskTreeManager *-right- TSourcesFactory: m_sourceFactory

class TSourcesFactory {
    +init(): bool
    +getSource(alias): TAbstractSource*
    +realese(): bool

    #addSource(source): bool

    -m_sources: TSourcesMap
}
TSourcesFactory *-- TSourcesMap: m_sources
"<< TString, TAbstractSource*>>\nstd::map" <|-- TSourcesMap

TSourcesMap o-down- TAbstractSource

class TAbstractSource {
    +TAbstractSource(alias)
    +{abstract} init() : bool
    +{abstract} importTree(url, tree): bool
    +{abstract} exportTree(url, tree): bool
    +{abstract} release() : bool

    +getAlias(): TString

    -m_alias: TString
    -m_initialized: bool
}

TAbstractSource <|-- TSourceJsonFile
class TSourceJsonFile {
    +{abstract} init() : bool
    +{abstract} importTree(url, tree): bool
    +{abstract} exportTree(url, tree): bool
    +{abstract} release() : bool
}

TAbstractSource <|-- TSourceSQLite
class TSourceSQLite {
    +{abstract} init() : bool
    +{abstract} importTree(url, tree): bool
    +{abstract} exportTree(url, tree): bool
    +{abstract} release() : bool
}

TAbstractSource <|-- TSourceHTTPQuery
class TSourceHTTPQuery {
    +{abstract} init() : bool
    +{abstract} importTree(url, tree): bool
    +{abstract} exportTree(url, tree): bool
    +{abstract} release() : bool
}


@enduml